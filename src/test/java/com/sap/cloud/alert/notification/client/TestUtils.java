package com.sap.cloud.alert.notification.client;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sap.cloud.alert.notification.client.internal.SimpleRetryPolicy;
import com.sap.cloud.alert.notification.client.model.configuration.*;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolVersion;
import org.apache.http.client.HttpClient;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.message.BasicStatusLine;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URI;
import java.util.Map;
import java.util.Set;

import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
import static com.sap.cloud.alert.notification.client.model.configuration.Predicate.CONTAINS;
import static com.sap.cloud.alert.notification.client.model.configuration.State.ENABLED;
import static java.lang.Boolean.FALSE;
import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Collections.singleton;
import static java.util.Collections.singletonMap;
import static org.apache.http.HttpStatus.SC_OK;

public class TestUtils {

    public static final Integer TEST_PAGE = 3;
    public static final Long TEST_TIMESTAMP = 1L;
    public static final String TEST_ID = "TEST_ID";
    public static final State TEST_STATE = ENABLED;
    public static final Long TEST_TOTAL_PAGES = 12L;
    public static final Integer TEST_PAGE_SIZE = 131;
    public static final Integer TEST_DISCARD_AFTER = 4;
    public static final Integer TEST_FALLBACK_TIME = 2;
    public static final String TEST_NAME = "TEST_NAME";
    public static final String TEST_ACTION_NAME = "TEST_ACTION_NAME";
    public static final String TEST_CONDITION_NAME = "TEST_CONDITION_NAME";
    public static final String TEST_SUBSCRIPTION_NAME = "TEST_SUBSCRIPTION_NAME";
    public static final String TEST_TYPE = "TEST_TYPE";
    public static final Boolean TEST_MANDATORY = FALSE;
    public static final Integer TEST_HTTP_ERROR_CODE = 404;
    public static final Predicate TEST_PREDICATE = CONTAINS;
    public static final Long TEST_TOTAL_RESULTS_COUNT = 16L;
    public static final String TEST_MESSAGE = "TEST_MESSAGE";
    public static final Long TEST_TIME_CREATED = 1586082414L;
    public static final Long TEST_LAST_MODIFIED = 1586082415L;
    public static final String TEST_USERNAME = "TEST_USERNAME";
    public static final String TEST_PASSWORD = "TEST_PASSWORD";

    public static final String TEST_PROPERTY_KEY = "eventType";
    public static final String TEST_DESTINATION_NAME = "TEST_DESTINATION_NAME";
    public static final String TEST_DESCRIPTION = "TEST_DESCRIPTION";
    public static final String TEST_KEYSTORE_CONTENT = "TEST_CONTENT";
    public static final String TEST_KEYSTORE_PASSWORD = "test";
    public static final ProtocolVersion PROTOCOL_VERSION = new ProtocolVersion("HTTP", 1, 1);
    public static final String TEST_TEST_OAUTH_RESPONSE = "{\"expires_in\":11342,\"access_token\":\"TEST_ACCESS_TOKEM\"}";
    public static final Set<String> TEST_LABELS = singleton("TEST_LABEL");
    public static final String TEST_PROPERTY_VALUE = "TEST_PROPERTY_VALUE";
    public static final Set<String> TEST_ACTIONS = singleton("TEST_ACTION");
    public static final String TEST_FALLBACK_ACTION = "TEST_FALLBACK_ACTION";
    public static final String TEST_KEYSTORE_CONTENT_PEM = "";
    public static final String TEST_KEYSTORE_CONTENT_P12 = "MIIQMQIBAzCCD/cGCSqGSIb3DQEHAaCCD+gEgg/kMIIP4DCCBg8GCSqGSIb3DQEHBqCCBgAwggX8AgEAMIIF9QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIWLwL5opLp5cCAggAgIIFyGoX2NiWywApJhADqub5xLTueQNjhOgTKlijipfRTmE53WsBOTyaGq7+V6LeTtBTVhZj7eFkb4jioEu3uik44k+z1MCay89U3x1zyiBmuayMSYKnGgiDLxOm3WUSQAuw4gvEJYk0izfrLXag9+LNPpC4T6hmrvnbNpI1kQ1NAuuAjtwIiCjNv/QxbyHV5Scz4mTslixWHN5nOHuU+RzHOAzu5LXsLpCSu4dqt2QAJIha4wGAYffqr6sNRIt/arJ0OHGKXq+y2TVqPAPS1eEy09q2hF67omGmigkljwurzzOUCCt5C7v20fVAAFzalh6NBxZ6d+2Enr4ujs2rdcAoqwGQqVsMevziBNwFjdqE+mBSclOazhHY3+Z/ra/xc+zH/VOMK3ijPo1P1hSxnMD9A6SwvQ4Zeosd8lmH2JadKohmFDaRzi34f4EehKxtuFZRLUniH38hcttc3QYoYH9BPsj7dDkyrssJMFFQMlQ1Oc50C3D0eWUWUUDESgYpk9F0hV0EzpUvA9VcnOR2pfuDPTDQyOEqHkwBVivWrgBGkL7cS2/7eT4S0N7mlqxzBNNCZFJaZoHJ4f3q4uu1aUNsDqEgh1IthcyO++fv1lZWPU0RZqaACDwcTDx0BIflDAvuuByRXwZomvgMXV3AJIupsoSijCHfO3Or+Bl4YMREbfd+BcaTvm0MTKH08Ui225f8wNfYJWWjI1ZVfQViMXI0Nf75bxchc48jrk8c1qf2EXwAFWh8YH9T4M2T3xtVzyuUF8whs8Cq8iKTX2Z0/qeV/HDk0xxSVjHyOR91uFheKpOVttC8ywJwr32R1SyyoH2TwEaNgzBICl6vA01268fcREdhS1eeSd58YtC6Grefvhxo9rZgHOAVk8RpEtZ91fnuDfZH6vAqCXgjf/tvUAXVW2Dz4oUNGqt+UkeEfwxVOKx2cunsdqc2O5XW3MyWRzqvu0MIMJkB2MGKUley3nQacE+alyktxsrGlDKMu5CbBARFX1M51LMtgi7UylZlDT+bSO9witdfMkr5mtOlNpZHIvP+rNWve8KYNaUzUAfKBTqK1JgRi6+Y/n5x1519GWaDYAEGJcekiqMCHK7YsQA6BWgLczyrNcVvGqTrjOFSZlF/XNHlXhMfFYETgbcWboxmFREIgg2ohPG1FoTNzIyU4kL8IKcuLpOu9g/FZo2cNYDKVpkGimbkHd9tMtFRR1JOi4Mqsocz4I7fntZsP3h1UsIYCK9lBSoogip0ccLsp30odXKyjFKy5gUN2MtZ4qV+tFNh6YasmGTx2ucfb0Re9poaeGD4MKrU1ty68zKW4CobGiQ6coauB2A0VL3oHARv0Ptnik5byCKtZw8LfAQ0VLna9+s/thqzPotMwrgv60SPnmCh3ot24Rum7+jRb/hsaVqWs2XUxguJ39z+4ZbRTz9O4ulVSJevN09zdmRORmyC5sOHKhbwCsuJIa8qJtxbp1z8xleNEa81vmjghn1ELIpww3Sdz4TSIsYt0EW3FhMygnpllAnleTE/0ON3t4sF0qoFOwCNU56qJXTYvsjg02zDwtJ32P1j7JD09l4Sw5KVtS15gZefzhJmFzsEjWU7RVbIhH2n40Kv1HYy+FXgkzXiqgtuFb9vMeWLgJxOSEevu/TxbwqYlNbPrnh0P13aySAnnL2pqWRB6LKIYZQ+7ieGmXqyJqUFXtrQmgktjl48/CCNdbTtKLKZel46litOOfahKQNp2DsHkS+dDGyMoDcHSJLQk3sPY/4EHMdhB62FDqU2UMbuJ9dAyUHDjSqpc6aAH2WorIAV7OSISee7Lyvbfo+k5wgToGG1HcTg2z0etm+arvB9UJeMifDtyiinguu4CU9lrW1oku9BEw7AAn27EgT+uX8Kjhe0vMQlYVQuMPMzyaq+K1BW/ZWbm66+qWNRvBsDGr9p1JiU1Q2AK5ZXm3mSfPO5qAgGgFCCRMXKzJlJ2QlYzLowggnJBgkqhkiG9w0BBwGgggm6BIIJtjCCCbIwggmuBgsqhkiG9w0BDAoBAqCCCXYwgglyMBwGCiqGSIb3DQEMAQMwDgQIVN4YSsxc80cCAggABIIJUFWvZ7q6lHaTdm/fIbNF/eTzcDcDEX2p9PU6uapwBjtjoGsWqmPWq1+NoJESbDi4HY90AiZfp9bgUWkf6FcKKnRu3cE6b15M6uv8cAU6RWlOIw1Awm4cQboWgh4p0f1jgKWaiq1wv7eSTifBXVH1cbmFG0Z7v/Rz7g1cUtt++wIRDFmz/u3kop6wkSs7yJqMDn7+Q3mROWBe+gIUzdqd5b6KQnPvC6OKdQkg8HKdSBf38BPa7k4sIYgBH7Po+nMnT77r8dTz8974K8IDDjjIXhJOFVKgIBlCD80XEJHjCRU4RQWkCoxeCiTaHh4YQ6Wh4SuYNOt83oph/75rYb6fhK4z0eLHB2UuVCNTzVadctpmsEiPFPrK/ZRKs6LnVCtJCvA57uIWJzAQqkvCAUFjLCURE5dU7I79ZN+sI40B9hSseZdhzXBCESHof+x8KRA4a8Erg1avhyc4AAbswyhKQWDK59+AwaYu/rgBiQctrXSqTCeKYJs5/IYbexWspzWh4TVgNYJ3caRy1Vr7g4IUd0DSTkbTyaotd6zpEPrG2N1FTio6KQ+8O84RrE5S7Jchv7Ew1Ryw75lb/YqKndSPOi+oH4o3Z5LeuFKeLMpgOkRLsM5PczaoSM8hkSBYr0mKIQ/3aAKFZIt7ZBUm+DFs+FFxMhatY/mSfkQelKZqtowbV6YT04ARxhuvs9cPAq6JF8zapBoMhbHn0Fx9dy2qYSCqfQoxOUv4LTs300u3q8j/XvhNOp8v9oI4kEOvhXksUHZx4lenvjbvmhxr597qihrwsOFHAjZ51/2tTj5/cr10ulGtXdFRk+Lhs4HUSbd9Zx7ppd1/4EDUNF/tgiuERQ7VtVf20SQK6uI41x+1do4zUpa6fVDnGgirOhvvQbRMP5FYWP/ah3DyZtMRvivrG3LzFbxx9hP7/nWyiesCTAgIOHGI4QP8BsrkUsPKA0n5i3k6CqvPmi3TsaI/XtAMCOrvEJIgbGYf4Lf6MJ/OY3B3vKSntZCMVlIwE/Sde/gN+6aWXeIvwXgtjFqB6Y3C5pQwQE/TDlZ+a9WC6GVUG1mnQjHi0/YRrx/H1lKI7Sw7rrcN9vEfh7p7VB/WxTUZ6quU6sxjHU7pIgd7peIUJcPw95T8yOiQYnZpZ7ei8NZqvpZhvrQ5gsXPnbzF0ixpeShPy4wUscfum6nMjzA4B7i3NLvPGo+zp11CFmPTmMM1rnhalNTpeiSGqy1Y/oT5kr8KoH8DpkXqR8P70pgOXb6GtEcmlPT/j6fcMiJ90xVzRJtxDBGSyg9D1EheQZqOHf9xMnyvGQOFxhMIQo+F1W/GdrFf2z9aZSAj7VD0rIQaWmEIT6PlAsyP8pzSSOXIYmGoDaWmXvameTZq5d7LAkL8UopTGaaBY1HgvhOE+J2VFxokYB/n8nldXse8PwqHj8K0SSnbFNhAk8EVArtngxCeI2WKrkO7qkgZgmp5uRkCEjIJbPmUFu17BrSQxiZf9Tv3WbFd6TXTjysm4A/A4wMHj7pTK7Nq5YodxyZoOprXnPMn0i6kKTrR+1GTzyJxE+ULOv26ODSj77Pd5pW8b6/khfwG8FjYl42IoQxhemboRP+AWhG3BlodUsAp3OE0khn4Zp8yQ76x3/5xVvkRd3N+TswdFMHmoZhBajT/Y7dZ1Ermw3h5cJwf9w0bAOYSarYU2lsFp0WaSXtaFa8rYSJ5quqZLFgSr8K4UVS8ouDL5YnMjWTYkvCen8099/xqT0LjQfrcm0h1OQ4PTg7kapbUf8/M1VfK1B5ChNTvXs9TGad8YKCB9kB4j/1OOL+whHYfdq5PlqoHS0glJrsahrocGBkiPAf79DMl9S+bk/JsWqLLui0EpbvEQN3pCinzNZWg3Fbi1uVbnYftLluw9Jr7urDAmRHAeyBoh2TQ7QKAnJ/eeDiOmOlw1oL3yay/4yTcSe5sh5XIbiNLYJrdYY7isUjUyygK0myy6LCNxW187EEhiyNuyjYIKzkqQQ0cpRIQkUXUQhR59XhAIuE20PWRrOn+8FrewMNH2sD3Xg/oqu5ZfVrH1/ISW9zHEiLrDDPyiXcHcnKd5TlKNH6RlcKhL6/Cy5dkKvD4QFu6IcPQ8oeVhJm7Xj1Lklo0wLh/hu2ETB0cQBSQgkEtmsK3pl1WW8p5cuVg2iHlCSHU74lXzPHyhGxpZfSW+VMkixu34/3DC6VaydgasEL9nVsqf2+aQZNFf2yBoXdR4Z9dSYkSxDeMj2dqx7v78P/rrLTx9n6fR6WV6A2x9iPa2LWkDK++sf3yikNq4AGuFYrorIAiiQ4xsyUeAtf2ojsunetd8rWzjL/poJ4/Hu7N42H/mYsdiPUnNiW1MyIC55g+6CyKSzscDlHuw56/YwCsTalHKg7KgylYh261DQfGsMNT5L+b8X7hxFLT1yVtT2D4U3aX6BmmpwY7/AtQM4QEStKE0YY7jbI/8hh4ulNymSGK9jAYUi5/pn69EM2WfrjJOpmRlmOP0rL2FiiF9Flm1M7Jl3aiKw5Ip6T72VkRynhFfeMvf5hHGK2hID8zfHPQRKBr5vLTonV5v6jT6FOPYNngvhI5RM15aKQgpkBjZZIEqqbQWfOO/bhrsvVOun5DM4CKltl4ZxKVvDkKcpg+xLKBTLkQoo8LfSNBcsbqD5nWNdMAN3ZaCYeFjw/mssm1CY8Z6fH7WaToYql94gjxGLpMjxCdn0XUqeJZZWM1/WAh14WX+V3z42tn8CKA8CQQE6PwBHUPCE+uBt/uEDac4zU3kTbRpQdWFeWVJ610kfGpEeYUBHrOV/UsRlM8iZ2YiZIWJNfsdDpNYRO/mJMe8Oz6fZnJ3KrpxZhaVSTp35+Zr++bbh8ZV5VihTwJ8wxLXdTU0vItVN3YlaeQwY9toTRCkK6I9BuqexszQ/Muf7lQgu4EKy7v1ZdTMONbohXLfatkjLs8p8SIDQ2bC8CzmTReLreGe/ZnYf61CbSqNYnd5ru+12S1QkZuDUX29snNvMcsrotFNUJbkKz1t+o5nicOYYCw0fIW6ECvF2La4Tpp1n/9THMpad8bIq39wO0Nj43opRlpLAUQ83f7aBEHGJUgMmUWrfIZJbZqb7rZMHhIL5AuP0gQcyQujg7axhGFMBFZ78Mwtz3pA8s58x/Hyqe7upblytSFwV23VX26qaIUrdNZMSUwIwYJKoZIhvcNAQkVMRYEFAx4X5ULxVnUmPjv6jr6oIBq0Oz/MDEwITAJBgUrDgMCGgUABBQAh3CgvqUp7JBIWESR7TafFQcgTAQICBvDsJVZTm8CAggA";
    public static final IRetryPolicy TEST_RETRY_POLICY = new SimpleRetryPolicy();
    public static final Set<String> TEST_CONDITIONS = singleton("TEST_CONDITION");
    public static final HttpClient TEST_HTTP_CLIENT = Mockito.mock(HttpClient.class);
    public static final URI TEST_OAUTH_SERVICE_URI = URI.create("https://nowhere.near.a.real.oauth.uri.sap.com/oauth/token?grant_type=client_credentials");
    public static final Map<String, String> TEST_PROPERTIES = singletonMap("TEST_PROPERTY_KEY", "TEST_PROPERTY_VALUE");
    public static final Condition TEST_CONDITION = new Condition(TEST_NAME, TEST_DESCRIPTION, TEST_PROPERTY_KEY, TEST_PREDICATE, TEST_PROPERTY_VALUE, TEST_MANDATORY, TEST_LABELS);
    public static final String HTTP_CERTIFICATE_CREDENTIALS_RESPONSE_FORMAT = "{\"destinationConfiguration\": {\"Authentication\": \"ClientCertificateAuthentication\",\"URL\": \"https://nowhere.near.a.real.uri.sap.com\", \"KeyStorePassword\": \"test\"},\"certificates\":[{\"Name\":\"test.p12\",\"Content\":\"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\",\"Type\":\"CERTIFICATE\"}]}";
    public static final String HTTP_BASIC_AUTHORIZATION_RESPONSE_FORMAT = "{\"destinationConfiguration\": {\"Authentication\": \"BasicAuthentication\",\"URL\": \"https://nowhere.near.a.real.uri.sap.com\", \"User\": \"username\", \"Password\": \"password\"}}";
    public static final String HTTP_OAUTH_AUTHORIZATION_RESPONSE_FORMAT = "{\"destinationConfiguration\": {\"Authentication\": \"OAuth2ClientCredentials\",\"URL\": \"https://nowhere.near.a.real.uri.sap.com\", \"clientId\": \"username\", \"clientSecret\": \"password\", \"tokenServiceURL\": \"https://nowhere.near.a.real.uri.sap.com/oauth/token?grant_type=client_credentials\"}}";
    public static final PagingMetadata TEST_CONFIGURATION_PAGING_METADATA = new PagingMetadata(TEST_PAGE, TEST_PAGE_SIZE, TEST_TOTAL_PAGES, TEST_TOTAL_RESULTS_COUNT);
    public static final ServiceRegion TEST_SERVICE_REGION = ServiceRegion.EU10;
    public static final String TEST_SERVICE_REGION_URI = "https://nowhere.near.a.real.uri.sap.com";
    public static final ServiceRegion TEST_DESTINATION_SERVICE_REGION = new ServiceRegion(Platform.CF, TEST_SERVICE_REGION_URI);
    public static final URI TEST_SERVICE_URI = TEST_SERVICE_REGION.getServiceURI();
    private static final ObjectMapper JSON_OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(NON_NULL);
    public static final TypeReference<ConfigurationResponse<Condition>> CONDITION_CONFIGURATION_TYPE = new TypeReference<ConfigurationResponse<Condition>>() {

    };

    public static <T> T fromJsonString(String valueAsString, Class<T> clazz) {
        try {
            return JSON_OBJECT_MAPPER.readValue(valueAsString, clazz);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static <T> T fromJsonString(String valueAsString, TypeReference<T> typeReference) {
        try {
            return JSON_OBJECT_MAPPER.readValue(valueAsString, typeReference);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static <T> String toJsonString(T value) {
        try {
            return JSON_OBJECT_MAPPER.writeValueAsString(value);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    @SuppressWarnings("unchecked")
    public static <T> T extractFieldValue(Object instance, String fieldName) {
        try {
            Field declaredField = instance.getClass().getDeclaredField(fieldName);

            declaredField.setAccessible(Boolean.TRUE);

            return (T) declaredField.get(instance);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            throw new RuntimeException(e);
        }
    }

    @SuppressWarnings("unchecked")
    public static <T> T extractSuperClassFieldValue(Object instance, String fieldName) {
        try {
            Field declaredField = instance.getClass().getSuperclass().getDeclaredField(fieldName);

            declaredField.setAccessible(Boolean.TRUE);

            return (T) declaredField.get(instance);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            throw new RuntimeException(e);
        }
    }

    public static HttpResponse createOAuthHttpResponse() {
        BasicHttpEntity entity = new BasicHttpEntity();
        BasicHttpResponse response = new BasicHttpResponse(new BasicStatusLine(PROTOCOL_VERSION, SC_OK, null));

        response.setEntity(entity);
        entity.setContent(new ByteArrayInputStream(TEST_TEST_OAUTH_RESPONSE.getBytes(UTF_8)));

        return response;
    }

    public static HttpResponse createCertificateAuthenticationResponse() {
        BasicHttpEntity entity = new BasicHttpEntity();
        BasicHttpResponse response = new BasicHttpResponse(new BasicStatusLine(PROTOCOL_VERSION, SC_OK, null));

        response.setEntity(entity);
        entity.setContent(new ByteArrayInputStream(HTTP_CERTIFICATE_CREDENTIALS_RESPONSE_FORMAT.getBytes(UTF_8)));

        return response;
    }

    public static HttpResponse createBasicAuthenticationHeaderResponse() {
        BasicHttpEntity entity = new BasicHttpEntity();
        BasicHttpResponse response = new BasicHttpResponse(new BasicStatusLine(PROTOCOL_VERSION, SC_OK, null));

        response.setEntity(entity);
        entity.setContent(new ByteArrayInputStream(HTTP_BASIC_AUTHORIZATION_RESPONSE_FORMAT.getBytes(UTF_8)));

        return response;
    }

    public static HttpResponse createOauthAuthenticationHeaderResponse() {
        BasicHttpEntity entity = new BasicHttpEntity();
        BasicHttpResponse response = new BasicHttpResponse(new BasicStatusLine(PROTOCOL_VERSION, SC_OK, null));

        response.setEntity(entity);
        entity.setContent(new ByteArrayInputStream(HTTP_OAUTH_AUTHORIZATION_RESPONSE_FORMAT.getBytes(UTF_8)));

        return response;
    }
}
